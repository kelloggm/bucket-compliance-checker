plugins {
    id 'java'
    id 'maven-publish'
}

repositories {
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

configurations {
    // for putting Error Prone javac in bootclasspath for running tests
    errorproneJavac
}

ext.versions = [
        checkerFramework: "3.1.1",
]


sourceCompatibility = 1.8
def checkerframework_local = false  // Set this variable to [true] while using local version of checker framework.

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    if (checkerframework_local) {
        implementation files('${CHECKERFRAMEWORK}/checker/dist/checker-qual.jar')
        implementation files('${CHECKERFRAMEWORK}/checker/dist/checker.jar')
        implementation files('${CHECKERFRAMEWORK}/checker/dist/jdk8.jar')
    }
    else {
        implementation "org.checkerframework:checker:${versions.checkerFramework}"
    }

    implementation "net.sridharan.objectconstruction:object-construction-checker:0.1.7"

    //compileOnly "com.google.errorprone:javac:9+181-r4173-1"

    // Testing
    testCompile "org.checkerframework:framework-test:${versions.checkerFramework}"
    testCompile 'software.amazon.awscdk:s3:1.25.0'
    testCompile 'software.amazon.awscdk:core:1.25.0'
    testCompile 'software.amazon.awscdk:ec2:1.25.0'

    errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"
}

tasks.withType(JavaCompile).all {
    options.compilerArgs.add("-Xlint:all")
}

// Add `mavenLocal()` in `repositories`, then run `./gradlew publishToMavenLocal`
// to publish your checker to your local Maven repository.
publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'org.checkerframework'
            artifactId = 'bucketcompliance-checker'
            version = '0.1-SNAPSHOT'

            from components.java
        }
    }
}

test {
    inputs.files("tests/bucketcompliance")
    inputs.files("src/main/java/org/checkerframework/checker/bucketcompliance")
    if (!JavaVersion.current().java9Compatible) {
        jvmArgs "-Xbootclasspath/p:${configurations.errorproneJavac.asPath}"
    }
}

clean.doFirst {
    delete "${rootDir}/tests/build/"
}
